//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP.NET_MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FarmaVETEntities : DbContext
    {
        public FarmaVETEntities()
            : base("name=FarmaVETEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Boleta> Boleta { get; set; }
        public virtual DbSet<DetalleBoleta> DetalleBoleta { get; set; }
        public virtual DbSet<Especie> Especie { get; set; }
        public virtual DbSet<Laboratorio> Laboratorio { get; set; }
        public virtual DbSet<Medicamento> Medicamento { get; set; }
        public virtual DbSet<TipoMedicamento> TipoMedicamento { get; set; }
    
        public virtual int SP_AgregarStock(Nullable<int> medicamentoId, Nullable<int> stockIngresado)
        {
            var medicamentoIdParameter = medicamentoId.HasValue ?
                new ObjectParameter("MedicamentoId", medicamentoId) :
                new ObjectParameter("MedicamentoId", typeof(int));
    
            var stockIngresadoParameter = stockIngresado.HasValue ?
                new ObjectParameter("StockIngresado", stockIngresado) :
                new ObjectParameter("StockIngresado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AgregarStock", medicamentoIdParameter, stockIngresadoParameter);
        }
    
        public virtual int SP_DarBajaMedicamento(Nullable<int> medicamentoId)
        {
            var medicamentoIdParameter = medicamentoId.HasValue ?
                new ObjectParameter("MedicamentoId", medicamentoId) :
                new ObjectParameter("MedicamentoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DarBajaMedicamento", medicamentoIdParameter);
        }
    
        public virtual ObjectResult<SP_ListarMedicamentosActivos_Result> SP_ListarMedicamentosActivos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListarMedicamentosActivos_Result>("SP_ListarMedicamentosActivos");
        }
    
        public virtual ObjectResult<SP_ListarMedicamentosDeBaja_Result> SP_ListarMedicamentosDeBaja()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListarMedicamentosDeBaja_Result>("SP_ListarMedicamentosDeBaja");
        }
    
        public virtual ObjectResult<SP_ListarMedicamentosVenta_Result> SP_ListarMedicamentosVenta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListarMedicamentosVenta_Result>("SP_ListarMedicamentosVenta");
        }
    
        public virtual int SP_ModificarMedicamento(Nullable<int> medicamentoId, string nombre, Nullable<int> especieId, Nullable<int> tipoMedicamentoId, Nullable<int> laboratorioId, string descripcion, Nullable<decimal> precio)
        {
            var medicamentoIdParameter = medicamentoId.HasValue ?
                new ObjectParameter("MedicamentoId", medicamentoId) :
                new ObjectParameter("MedicamentoId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieIdParameter = especieId.HasValue ?
                new ObjectParameter("EspecieId", especieId) :
                new ObjectParameter("EspecieId", typeof(int));
    
            var tipoMedicamentoIdParameter = tipoMedicamentoId.HasValue ?
                new ObjectParameter("TipoMedicamentoId", tipoMedicamentoId) :
                new ObjectParameter("TipoMedicamentoId", typeof(int));
    
            var laboratorioIdParameter = laboratorioId.HasValue ?
                new ObjectParameter("LaboratorioId", laboratorioId) :
                new ObjectParameter("LaboratorioId", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ModificarMedicamento", medicamentoIdParameter, nombreParameter, especieIdParameter, tipoMedicamentoIdParameter, laboratorioIdParameter, descripcionParameter, precioParameter);
        }
    
        public virtual int SP_ReducirStockMedicamento(Nullable<int> medicamentoId, Nullable<int> stock_Descontado)
        {
            var medicamentoIdParameter = medicamentoId.HasValue ?
                new ObjectParameter("MedicamentoId", medicamentoId) :
                new ObjectParameter("MedicamentoId", typeof(int));
    
            var stock_DescontadoParameter = stock_Descontado.HasValue ?
                new ObjectParameter("Stock_Descontado", stock_Descontado) :
                new ObjectParameter("Stock_Descontado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ReducirStockMedicamento", medicamentoIdParameter, stock_DescontadoParameter);
        }
    
        public virtual int SP_RegistrarMedicamento(string nombre, Nullable<int> especieId, Nullable<int> tipoMedicamentoId, Nullable<int> laboratorioId, string descripcion, Nullable<decimal> precio)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var especieIdParameter = especieId.HasValue ?
                new ObjectParameter("EspecieId", especieId) :
                new ObjectParameter("EspecieId", typeof(int));
    
            var tipoMedicamentoIdParameter = tipoMedicamentoId.HasValue ?
                new ObjectParameter("TipoMedicamentoId", tipoMedicamentoId) :
                new ObjectParameter("TipoMedicamentoId", typeof(int));
    
            var laboratorioIdParameter = laboratorioId.HasValue ?
                new ObjectParameter("LaboratorioId", laboratorioId) :
                new ObjectParameter("LaboratorioId", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RegistrarMedicamento", nombreParameter, especieIdParameter, tipoMedicamentoIdParameter, laboratorioIdParameter, descripcionParameter, precioParameter);
        }
    }
}
